type User {
    userId: ID!
    name: String!
    email: String!
    username: String!
}

type Content {
    contentId: ID!
    name: String
    description: String
    service:Service
    user: User
}

type Service {
    serviceId: ID!
    price: Float!
    name: String!
    description: String
    category: String!
    latitude: Float
    longitude: Float
    departureDate: String
    arrivalDate: String
    transportType: String
    content: Content
    country: String
    city: String
}

type Payment {
    paymentId: ID!
    totalAmount: Float!
    userId: ID!
    paid: Boolean!
    services: [Service]
}

enum ServiceCategory {
    ALIMENTATION
    TRANSPORT
    HOUSING
    ECO_WALK
}

input ServiceFilter {
    filter: String
    categories: [ServiceCategory] = [ALIMENTATION, TRANSPORT, HOUSING, ECO_WALK]
    price: PriceFilter
}

input PriceFilter {
    lessThan: Float
    moreThan: Float
}


type Query {
    findAllServices(page: Int = 1, limit: Int = 10): [Service]
    findServiceById(serviceId: ID!): Service
    servicesByCategory(serviceCategory: String!): [Service]
    servicesByWord(word: String!): [Service]
    findServicesByFilter(filter: ServiceFilter, page: Int = 1, limit: Int = 10): [Service]

    findAllContents(page: Int = 1, limit: Int = 10): [Content]
    findContentById(contentId: ID!): Content
    findContentsByFilter(filter: String, page: Int = 1, limit: Int = 10): [Content]

    findAllMyPayments: [Payment]
    getMyShoppingCart: Payment
}

type Mutation {
    pay: String
    addToMyShoppingCart(serviceId: ID!): String
}

